#! /bin/bash

#TODO:
# deduplication (blob and many old blobs will be in same project)
# can i figure out what branch a commit and blob is in ?
# include in the input the specific blob(s) in the commit that fix the vuln.
# try c2cc/c2pc instead of b2ob/ob2b
# does c2h return more than one head? If so, how should I handle that?
# why does showCmtTree.perl sometimes return error:
#    example: ./find_cloned_files - d7cad81093cd805110291f84d64d385557d0ffba


#
# find_cloned_files:
# Take a commit hash for a commit that fixes and vulnerability and find
# projects that contain the vulnerable file. The output is placed in the
# directory given on the command line.
#

#
# Global variables
#
outdir="./out"   # this gets changed by command line arg 
count=0
hostname=`uname -n`

#
# Functions
#

# getValues: call ~/lookup/getValues
function getValues {
    local map=$1   # c2b, b2c, c2p, b2ob, c2f, etc
    local input="$2" # sha1 hash for blob or commit 
    result=`printf "$input" | ~/lookup/getValues -f $map | cut -s -d ";" -f 2`
    printf "$result\n"
}

# print information about a blob
function print_info {
    local blob="$1"
    commits=$(getValues 'b2c' "$blob\n")
    count=$((count+1))
    echo "$count. working on blob $blob"
    echo "# blob = $blob"  >> $outdir/vulnerable.md
    echo "# blob = $blob" >> $outdir/not-vulnerable.md
    echo "# blob = $blob" >> $outdir/unknown.md
    for commit in $commits; do
        rm -f $outdir/tmp

        # output commit
        echo "commit = $commit  " >> $outdir/tmp

        # state indicates if the project is:
        #     vulnerable: A known vulnerable blob is in the head commit.
        #     not-vulnerable: A known good blob is in the head commit.
        #     unknown: A vulnerable blob is in the project, but the head
        #              commit does not contain the vulnerable blob or a known
        #              fixed version of the blob.
        state='uninitialized'

        # get head commit and see if vulnerable file is in head commit
        head_commit=$(getValues 'c2h' $commit\n)
        for head in $head_commit; do
            echo "head_commit = $head_commit  " >> $outdir/tmp

            # see if the blob is in the head commit
            tree=`echo $head | ~/lookup/showCmtTree.perl`
            result=`echo "$tree" | grep $blob`
            #echo -n "blob in head commit: " >> $outdir/tmp
            if [ "$result" != "" ]; then
                #echo "Yes  " >> $outdir/tmp
                state="vulnerable"
            else
                #echo "No  " >> $outdir/tmp
                state="unknown"
                # see if head commit contains one of the known good blobs
                tree=`echo $head | ~/lookup/showCmtTree.perl`
                while read -r gb; do  # gb is good blob
                    result=`echo $tree | grep $gb`
                    if [ "$result" != "" ]; then
                        state="not-vulnerable"
                        break
                    fi
                done < $outdir/good_blobs;
            fi
        done
        #echo "state: $state  " >> $outdir/tmp

        # get pathnames
        if [ "$hostname" = "da4.eecs.utk.edu" ]; then
            pathnames=`echo $commit | ~/lookup/showCmtTree.perl | grep $blob | cut -d \; -f 3`
        else
            pathnames=`ssh da4 "echo $commit | ~/lookup/showCmtTree.perl | grep $blob" | cut -d \; -f 3`
        fi
        SAVEIFS=$IFS
        IFS=$'\n'
        for name in $pathnames; do
            echo "path = $name  " >> $outdir/tmp
        done
        IFS=$SAVEIFS

        # get projects
        projects=$(getValues 'c2p' "$commit\n")
        if [ -z "$projects" ]; then
            echo "No project found, c2p failed for commit $commit" >&2
        else
            proj=`echo "$projects" | cut -d ";" -f 2`
            for p in $proj; do
                url=`./toUrl $p`
                echo "project = $p, $url  " >> $outdir/tmp
                #echo "project url = $url  " >> $outdir/tmp
            done
        fi

        echo "" >> $outdir/tmp

        if [ "$state" = "vulnerable" ]; then
            cat $outdir/tmp >> $outdir/$state.md
        elif [ "$state" = "not-vulnerable" ]; then
            cat $outdir/tmp >> $outdir/$state.md
        elif [ "$state" = "unknown" ]; then
            cat $outdir/tmp >> $outdir/$state.md
        else
            echo state: Error: state has an unknown value: \'$state\' >&2
        fi
 
        rm -f $outdir/tmp
    done
}

#
# Main body of script
#

# For now, this must run on da4 because of the calls to ~/lookup/showCmtTree
if [ "$hostname" != "da4.eecs.utk.edu" ]; then
    echo "Error: Must run on da4" >&2
    exit
fi

# Check the command line args 
if [[ $# -ne 2 ]]; then
   echo "usage: find_cloned_files <output directory> <commit hash>" >&2
   echo "If output directory is -, use the commit hash for the directory name"
   echo "Example: ./find_cloned_files - 92fe84214967012e951f7aee5bcee9977c426eef"
   exit 1
fi

echo Initializing

# See if output directory exits. If so, exit. If not, create it.
if [[ "$1" == "-" || "$1" == "-f" ]]; then
    # if output directory is -, set it to the commit hash (the 2nd arg)
    outdir="$2"
else
    outdir="$1"
fi
if [ -e $outdir ]; then
    if [[ "$outdir" == "out" || "$1" == "-f" ]]; then
        rm -rf "$outdir"  # temporary hack for development 
    else
        echo Error: directory $outdir already exits >&2
        exit 1
    fi
fi
if [ "${outdir:0:1}" == "-" ]; then
    echo Error: directory name $outdir cannot start with - >&2
    exit 1
fi
mkdir $outdir
if [ $? -ne 0 ]; then
    exit 1
fi

# see if the commit is valid
commit="$2"
if [ `echo $commit | wc -c` -ne 41 ]; then
    echo "Error: $commit is not a valid sha1 hash" >&2
    exit 1
fi

# get blobs in this commit
blobs=$(getValues 'c2b' $commit\n)
if [ "$blobs" = "" ]; then
    echo "Error: commit $commit is not found in WoC"
    exit
fi

# get files in this commit
files=$(getValues 'c2f' $commit\n)

# Get the blobs before the commit with b2ob. These likely have the 
# vulnerability. 
echo "Getting old blobs with b2ob"
for blob in $blobs; do
    ./b2ob_r "$blob" >> $outdir/bad_blobs
done

# Get the blobs in the commit and after. These likely contain the fix.
echo Getting new blobs with ob2b
printf "$blobs\n" >> $outdir/good_blobs
for blob in $blobs; do
   ./ob2b_r "$blob" >> $outdir/good_blobs
done

#
# get information about the potentially vulnerable blobs
#
echo "found "`wc -l $outdir/bad_blobs | cut -d " " -f 1`" potentially vulnerable blobs"
while read -r blob; do
    print_info $blob
done < $outdir/bad_blobs;

#
# Collect stats to output 
#
num_vulnerable=`grep "^project =" $outdir/vulnerable.md | sort | uniq | wc -l`
num_not_vulnerable=`grep "^project =" $outdir/not-vulnerable.md | sort | uniq | wc -l`
num_unknown=`grep "^project =" $outdir/unknown.md | sort | uniq | wc -l`

#
# Output information about this commit
#
echo "# Commit that fixes a vulnerability:" >> $outdir/README.md
echo "$commit" >> $outdir/README.md
echo "" >> $outdir/README.md

echo "# Information about the above commit" >> $outdir/README.md
echo "$blobs" | sed -e "s/$/  /" >> $outdir/blobs.md
echo "" >> $outdir/blobs.md
echo "$files" | sed -e "s/$/  /" >> $outdir/blobs.md
echo "<a href=blobs.md>Blobs and filenames</a> in commit $commit  " >> $outdir/README.md
echo "<a href=bad_blobs>Ancestors </a> of the above blobs, which are before the fixing commit, thus presumably vulnerable. (recursive b2ob)  " >> $outdir/README.md
echo "<a href=good_blobs>Descendants </a> of the fixed blobs, which presumably also contain the fix. (recursive ob2b)  " >> $outdir/README.md
echo "" >> $outdir/README.md

echo "# Projects which have contained one of the presumably vulnerable blobs:" >> $outdir/README.md
echo "$num_vulnerable <a href="vulnerable.md">Vulnerable Projects</a>  " >> $outdir/README.md
echo "$num_not_vulnerable <a href="not-vulnerable.md">Not Vulnerable Projects</a>  " >> $outdir/README.md
echo "$num_unknown <a href="unknown.md">Unknown Projects</a>  " >> $outdir/README.md
echo "" >> $outdir/README.md

exit 0
