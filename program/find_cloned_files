#! /bin/bash

#TODO:
# why does showCmtTree.perl sometimes return error:
#    example: ./find_cloned_files - d7cad81093cd805110291f84d64d385557d0ffba
# most test cases and explain the case (like lz4)
#
# deduplication (blob and many old blobs will be in same project)
# can i figure out what branch a commit and blob is in ?
# include in the input the specific blob(s) in the commit that fix the vuln.
# try c2cc/c2pc instead of b2ob/ob2b
# does c2h return more than one head? If so, how should I handle that?
# see if there are ways to improve performance
#      showCmtTree.perl is sometimes called multiple times on the same commit
#      maybe the for commit loop in print_info should be parallel
#      grep $gb -> read in once and egrep "x|y|z"
 
#
# find_cloned_files:
# Take a commit hash for a commit that fixes and vulnerability and find
# projects that contain the vulnerable file. The output is placed in the
# directory given on the command line.
#

#
# Global variables
#
verbose="false"   # if true, include project url and commit time
outdir="./out"   # this gets changed by command line arg 
hostname=`uname -n`
max_threads=8  # how many processes to run in parallel

#
# Call when user hits control-c. Kill all child processes before exitting.
#
trap 'pkill -P $$; echo killed; exit' SIGINT SIGTERM

#
# Functions
#

# getValues: call ~/lookup/getValues
function getValues {
    local map=$1   # c2b, b2c, c2p, b2ob, c2f, etc
    local input="$2" # sha1 hash for blob or commit 
    result=`printf "$input" | ~/lookup/getValues -f $map | cut -s -d ";" -f 2`
    printf "$result\n"
}

# print information about a blob
function print_info {
    local blob="$1"
    local blob_count="$2"

    echo "$blob_count. working on blob $blob"

    commits=$(getValues 'b2c' "$blob\n")

    echo "# blob = $blob" >> $outdir/vulnerable.md.$blob_count
    echo "# blob = $blob" >> $outdir/not-vulnerable.md.$blob_count
    echo "# blob = $blob" >> $outdir/unknown.md.$blob_count
    for commit in $commits; do
        rm -f $outdir/tmp.$blob_count

        # output commit
        echo "commit = $commit  " >> $outdir/tmp.$blob_count

        # state indicates if the project is:
        #     vulnerable: A known vulnerable blob is in the head commit.
        #     not-vulnerable: A known good blob is in the head commit.
        #     unknown: A vulnerable blob is in the project, but the head
        #              commit does not contain the vulnerable blob or a known
        #              fixed version of the blob.
        state='uninitialized'

        # get head commit and see if vulnerable file is in head commit
        head_commit=$(getValues 'c2h' $commit\n)
        for head in $head_commit; do
            if [ "$verbose" = "true" ]; then
                ta=$(getValues 'c2ta' $head\n)
                t=`echo $ta | awk -F\; '{ printf ("(%s)", strftime("%F:%T", $1)) }'`
            else
                t=""
            fi
            echo "head_commit = $head $t  " >> $outdir/tmp.$blob_count

            # see if the blob is in the head commit
            if [ "$hostname" = "da4.eecs.utk.edu" ]; then
                tree=`echo $head | ~/lookup/showCmtTree.perl`
            else
                tree=`ssh da4 "echo $head | ~/lookup/showCmtTree.perl"`
            fi
            result=`echo "$tree" | grep $blob`
            #echo -n "blob in head commit: " >> $outdir/tmp.$blob_count
            if [ "$result" != "" ]; then
                #echo "Yes  " >> $outdir/tmp.$blob_count
                state="vulnerable"
            else
                #echo "No  " >> $outdir/tmp.$blob_count
                state="unknown"
                # see if head commit contains one of the known good blobs
                while read -r gb; do  # gb is good blob
                    result=`echo $tree | grep $gb`
                    if [ "$result" != "" ]; then
                        state="not-vulnerable"
                        break
                    fi
                done < $outdir/good_blobs;
            fi
        done
        #echo "state: $state  " >> $outdir/tmp.$blob_count

        # get pathnames
        if [ "$hostname" = "da4.eecs.utk.edu" ]; then
            pathnames=`echo $commit | ~/lookup/showCmtTree.perl | grep $blob | cut -d \; -f 3`
        else
            pathnames=`ssh da4 "echo $commit | ~/lookup/showCmtTree.perl | grep $blob" | cut -d \; -f 3`
        fi
        SAVEIFS=$IFS
        IFS=$'\n'
        for name in $pathnames; do
            echo "path = $name  " >> $outdir/tmp.$blob_count
        done
        IFS=$SAVEIFS

        # get projects
        projects=$(getValues 'c2p' "$commit\n")
        if [ -z "$projects" ]; then
            echo "No project found, c2p failed for commit $commit" >&2
        else
            proj=`echo "$projects" | cut -d ";" -f 2`
            for p in $proj; do
                if [ "$verbose" == "true" ]; then
                    url=`./toUrl $p`
                fi
                echo "project = $p, $url  " >> $outdir/tmp.$blob_count
            done
        fi

        echo "" >> $outdir/tmp.$blob_count

        if [ "$state" = "vulnerable" ]; then
            cat $outdir/tmp.$blob_count >> $outdir/$state.md.$blob_count
        elif [ "$state" = "not-vulnerable" ]; then
            cat $outdir/tmp.$blob_count >> $outdir/$state.md.$blob_count
        elif [ "$state" = "unknown" ]; then
            cat $outdir/tmp.$blob_count >> $outdir/$state.md.$blob_count
        else
            echo state: Error: state has an unknown value: \'$state\' >&2
        fi
 
        rm -f $outdir/tmp.$blob_count
    done
    echo "  $blob_count. finished with blob $blob"
}

#
# Main body of script
#

# Check the command line args 
if [[ $# -ne 2 ]]; then
   echo "usage: find_cloned_files <output directory> <commit hash>" >&2
   echo "If output directory is -, use the commit hash for the directory name"
   echo "Example: ./find_cloned_files - 92fe84214967012e951f7aee5bcee9977c426eef"
   exit 1
fi

echo Initializing

# See if output directory exits. If so, exit. If not, create it.
if [[ "$1" == "-" || "$1" == "-f" ]]; then
    # if output directory is -, set it to the commit hash (the 2nd arg)
    outdir="$2"
else
    outdir="$1"
fi
if [ -e $outdir ]; then
    if [[ "$outdir" == "out" || "$1" == "-f" ]]; then
        rm -rf "$outdir"  # temporary hack for development 
    else
        echo Error: directory $outdir already exits >&2
        exit 1
    fi
fi
if [ "${outdir:0:1}" == "-" ]; then
    echo Error: directory name $outdir cannot start with - >&2
    exit 1
fi
mkdir $outdir
if [ $? -ne 0 ]; then
    exit 1
fi

# see if the commit is valid
fixed_commit="$2"
if [ `echo $fixed_commit | wc -c` -ne 41 ]; then
    echo "Error: $fixed_commit is not a valid sha1 hash" >&2
    exit 1
fi

# get blobs in this commit
blobs=$(getValues 'c2b' $fixed_commit\n)
if [ "$blobs" = "" ]; then
    echo "Error: commit $fixed_commit is not found in WoC"
    exit
fi

# get files in this commit
files=$(getValues 'c2f' $fixed_commit\n)

# Get the blobs before the commit with b2ob. These likely have the 
# vulnerability. Then get the blobs in the commit and after. These 
# likely contain the fix.
echo "Getting old blobs with b2ob and new blobs with ob2b"
./b2ob_r $blobs >> $outdir/bad_blobs &
printf "$blobs\n" >> $outdir/good_blobs
./ob2b_r $blobs >> $outdir/good_blobs &
wait  # run b2ob_r and ob2b_r in parallel and then wait for them to both finish

#
# get information about the potentially vulnerable blobs
#
echo "found "`wc -l $outdir/bad_blobs | cut -d " " -f 1`" potentially vulnerable blobs"

blob_count=0
for blob in $(cat $outdir/bad_blobs); do
    blob_count=$((blob_count+1))
    print_info $blob $blob_count &
    sleep 0.2 # give it a little time to start before starting the next
    # limit how many sub-processes are running in parallel
    while [ `pgrep -c -P $$` -ge $max_threads ]; do
        sleep 1
    done
done
wait

#
# Get all the information collected in the different threads above into one 
# set of files
#
for ((i=1; i<=$blob_count; i++)); do
    cat $outdir/vulnerable.md.$i >> $outdir/vulnerable.md
    cat $outdir/not-vulnerable.md.$i >> $outdir/not-vulnerable.md
    cat $outdir/unknown.md.$i >> $outdir/unknown.md
    rm $outdir/vulnerable.md.$i $outdir/not-vulnerable.md.$i $outdir/unknown.md.$i
done

#
# Collect stats to output 
#
num_vulnerable=`grep "^project =" $outdir/vulnerable.md | sort | uniq | wc -l`
num_not_vulnerable=`grep "^project =" $outdir/not-vulnerable.md | sort | uniq | wc -l`
num_unknown=`grep "^project =" $outdir/unknown.md | sort | uniq | wc -l`

#
# Output information about this commit
#
echo "# Commit that fixes a vulnerability:" >> $outdir/README.md
echo "$fixed_commit" >> $outdir/README.md
echo "" >> $outdir/README.md

echo "# Information about the above commit" >> $outdir/README.md
echo "$blobs" | sed -e "s/$/  /" >> $outdir/blobs.md
echo "" >> $outdir/blobs.md
echo "$files" | sed -e "s/$/  /" >> $outdir/blobs.md
echo "<a href=blobs.md>Blobs and filenames</a> in commit $fixed_commit  " >> $outdir/README.md
echo "<a href=bad_blobs>Ancestors </a> of the above blobs, which are before the fixing commit, thus presumably vulnerable. (recursive b2ob)  " >> $outdir/README.md
echo "<a href=good_blobs>Descendants </a> of the fixed blobs, which presumably also contain the fix. (recursive ob2b)  " >> $outdir/README.md
echo "" >> $outdir/README.md

echo "# Projects which have contained one of the presumably vulnerable blobs:" >> $outdir/README.md
echo "$num_vulnerable <a href="vulnerable.md">Vulnerable Projects</a> (Known to contain presumably vulnerable blob in the most current revision)  " >> $outdir/README.md
echo "$num_not_vulnerable <a href="not-vulnerable.md">Not Vulnerable Projects</a> (Known to contain a fixed version in the most current revision)  " >> $outdir/README.md
echo "$num_unknown <a href="unknown.md">Unknown Projects</a> (Presumably vulnerable code has been changed in most current revision, unknown if the changes fixes vulnerability)  " >> $outdir/README.md
echo "" >> $outdir/README.md

exit 0
